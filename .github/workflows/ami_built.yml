name: AMI Build

on:
  push:
    branches: [main]

jobs:
  ami-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.7.2/packer_1.7.2_linux_amd64.zip
          unzip packer_1.7.2_linux_amd64.zip
          chmod +x packer
          sudo mv packer /usr/local/bin/
          packer version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      

      - name: Run Packer pulgin installation
        run: packer init .

      - name: zip all files
        run: zip -r webapp.zip .

      - name: Build ami with packer
        run: packer build -var 'MARIADB_PASSWORD=${{ secrets.PASSWORD }}' -var 'MYSQL_DB_NAME=${{ secrets.DATABASE }}' -var 'MARIADB_USER=${{ secrets.USER }}' -var 'AWS_AMI_REGION=${{ secrets.AWS_REGION }}' -var-file="variables.pkrvars.hcl" aws-debian.pkr.hcl

      - name: Get Ami Id
        run: |
          echo AMI_ID=$(jq -r '.builds[-1].artifact_id' ./manifest.json | cut -d ":" -f2) >> $GITHUB_ENV
        shell: bash

      - name: create launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEMO_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

        run: |
          aws ec2 create-launch-template-version --launch-template-name csye6225-instance-20231204064518217000000003 --source-version 1 --launch-template-data '{"ImageId":"${{ env.AMI_ID }}"}'
          echo "Launch template ID completed"

      - name: Instance refresh auto scale to use new launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEMO_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name cloud-auto-scaling-group
          check_instance_refresh_status() {
            status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name cloud-auto-scaling-group --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$status" == "Successful" ] || [ "$status" == "Failed" ]; then
              exit 1
            else
              return 0
            fi
          }

          # Wait for the instance refresh to complete
          while check_instance_refresh_status; do
              sleep 30  # You can adjust the sleep interval as needed
              echo "Waiting for auto scaling group to refresh"
          done
          
          status1=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name cloud-auto-scaling-group --query 'InstanceRefreshes[0].Status' --output text)
          if [ "$status1" == "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            else
              echo "Instance refresh completed successfully"
              exit 0
            fi


